# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBLoader
                                 A QGIS plugin
 This is an experimental plugin for 3DCityDB data visualization and manipulation.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Konstantinos Pantelios
        email                : konstantinospantelios@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject,QThread,pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QGraphicsView
from qgis.core import QgsApplication, QgsProject, Qgis
from qgis.core import QgsCoordinateReferenceSystem
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dialog.citydb_loader_dialog import *    #Main dialog
#from .connector import DlgConnector                 #New Connection dialog
from .main.functions import *
from .main.connection_tab import *
from .main.import_tab import *
from .main.connection import *
from .main.installation import *
from .main.widget_setup import *
from .main.threads import *

import os.path

class DBLoader:
    """QGIS Plugin Implementation."""

    plugin_package = 'qgis_pkg'

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.module_container=[]
        self.conn=None
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DBLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&3DCityDB-Loader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DBLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addDatabaseToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/citydb_loader/icons/plugin_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'&3DCityDB-Loader'),
            callback=self.run,
            parent=self.iface.mainWindow())


        # will be set False in run()
        self.first_start = True    

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&3DCityDB-Loader'),
                action)
            self.iface.removeDatabaseToolBarIcon(action)


#-----------#####################################################################
#--METHODS--#####################################################################
#-----------#####################################################################


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False


            self.dlg = DBLoaderDialog()
            self.dlg.btnInstallDB.init_text= "Install plugin contents to database {DB} for schema {SC}"
            self.dlg.btnUnInstallDB.init_text= "Un-install plugin contents from database {DB} for schema {SC}"
            self.dlg.btnClearDB.init_text= "Clear entire {DB} database from plugin contents"
            self.dlg.btnRefreshViews.init_text= "Refresh views for schema {SC} in database {DB}"
            self.dlg.lblDbSchema.init_text="Database: {Database}\nSchema: {Schema}"

        ## 'Connection' tab ######################################################################################
        #/ 'Connection' group box  //////////////////////////////////////////////////////////////////////////////#
            self.dlg.cbxExistingConnection.currentIndexChanged.connect(self.evt_cbxExistingConnection_changed)
            self.dlg.btnNewConnection.clicked.connect(self.evt_btnNewConnection_clicked)

        #/ 'Database' group box  //////////////////////////////////////////////////////////////////////////////#
            self.dlg.btnConnectToDB.clicked.connect(self.evt_btnConnectToDB_clicked)
            self.dlg.cbxSchema.currentIndexChanged.connect(self.evt_cbxSchema_changed)


        #/ 'User Type' group box ///////////////////////////////////////////////////////////////////////
            self.dlg.rdViewer.clicked.connect(self.evt_rdViewer_clicked)
            self.dlg.rdEditor.clicked.connect(self.evt_rdEditor_clicked)
        ##----------------########################################################################################



        ## 'Import' tab ######################################################################################
            self.dlg.qcbxFeature.currentIndexChanged.connect(self.evt_qcbxFeature_changed)
            
            #Get initial canvas extent
            canvas = self.iface.mapCanvas()
            crs = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
            extent = canvas.extent()
            #self.dlg.qgrbExtent.setOriginalExtent(extent,canvas.mapSettings().destinationCrs())
            self.dlg.qgrbExtent.setMapCanvas(canvas)
            self.dlg.qgrbExtent.setCurrentExtent(extent,QgsCoordinateReferenceSystem(crs)) #TODO: get crs from canvas or layer
            self.dlg.qgrbExtent.setOutputCrs(QgsCoordinateReferenceSystem(crs))
            #Set extent change signal
            self.iface.mapCanvas().extentsChanged.connect(self.evt_canvas_extChanged)
            self.dlg.qgrbExtent.extentChanged.connect(self.evt_qgrbExtent_extChanged)

            self.dlg.cbxGeometryLvl.currentIndexChanged.connect(self.evt_cbxGeometryLvl_changed)
            #self.dlg.cbxGeomteryType.currentTextChanged.connect(self.evt_cbxGeomteryType_changed)
            self.dlg.btnImport.clicked.connect(self.evt_btnImport_clicked)
        ##----------------########################################################################################

        ## 'Settings' tab ######################################################################################

            self.dlg.btnInstallDB.clicked.connect(self.evt_btnInstallDB_clicked)
            self.dlg.btnUnInstallDB.clicked.connect(self.evt_btnUnInstallDB_clicked)
            self.dlg.btnClearDB.clicked.connect(self.evt_btnClearDB_clicked)

            self.dlg.btnRefreshViews.clicked.connect(self.evt_btnRefreshViews_clicked)
            

        ##----------------########################################################################################

            print("Initial start")
            
        #Get existing connections
            dbs=get_postgres_conn(self)
    
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            

            msg= "all is good for now"
            #filename = self.dlg.lineEdit.text()
            self.show_Qmsg(msg)



#----------#####################################################################
#--EVENTS--#####################################################################
#----------#####################################################################


## 'Connection' tab ######################################################################################
#/ 'Connection' group box  //////////////////////////////////////////////////////////////////////////////#
    def evt_cbxExistingConnection_changed(self):
        cbxExistingConnection_setup(self)

    def evt_btnNewConnection_clicked(self):
        dlgConnector = DlgConnector()
        dlgConnector.show()
        res=dlgConnector.exec_()
        if dlgConnector.new_connection:
            self.dlg.cbxExistingConnection.addItem(f'{dlgConnector.new_connection.connection_name}',dlgConnector.new_connection)
        else: return None

#/ 'Database' group box  //////////////////////////////////////////////////////////////////////////////#
    def evt_btnConnectToDB_clicked(self):
        btnConnectToDB_setup(self)



    def evt_cbxSchema_changed(self):
        """event when 'Check 3DCityDB compatability of <database>' button is pressed  """
        res=cbxSchema_setup(self)
        if not res==True: 
            reset_importTab(self)
            reset_settingsTab(self)

        ## When connection status is green we can proceed
        if all(value==True for value in self.connection_status.values()):
            print('all is green')
            self.dlg.gbxUserType.setDisabled(False)

            ## Allow user type selection depending on privileges 
            if all(p in self.availiable_privileges for p in priviledge_types):
                self.dlg.rdEditor.setDisabled(False)
                self.dlg.rdViewer.setDisabled(False)

            elif any(p=='SELECT' for p in self.availiable_privileges):
                self.dlg.rdEditor.setDisabled(True)
                self.dlg.rdViewer.setDisabled(False)

        else: 
            deselect_radiobtn_group(self)
            self.dlg.gbxUserType.setDisabled(True)


    def evt_rdViewer_clicked(self):
        gbxUserType_setup(self,user_type=self.dlg.rdViewer.text())


    def evt_rdEditor_clicked(self):
        gbxUserType_setup(self,user_type=self.dlg.rdEditor.text())

        


    
        # selected_db=self.dlg.cbxExistingConnection.currentData()
        # selected_schema=self.dlg.cbxSchema.currentText()
        # self.dlg.lblInstall.setText(f"Installation for {selected_schema}:")

        # if has_schema_privileges(self) and has_table_privileges(self):
        #     self.dlg.lblUserPrivileges_out.setText(f"""  <html><head/><body>
        #                                                 <p> <img src=":/plugins/citydb_loader/icons/success_icon.svg"/> 
        #                                                     <span style=" color:#00E400;"> Has necessary privileges</span>
        #                                                 </p></body></html>  """)
        # else:
        #     self.dlg.lblUserPrivileges_out.setText(f"""  <html><head/><body>
        #                                                 <p> <img src=":/plugins/citydb_loader/icons/failure_icon.svg"/> 
        #                                                     <span style=" color:#FF0000;"> No privileges</span>
        #                                                 </p></body></html>  """)

        

        
        
        # if is_3dcitydb(self):

        #     #Parially enable the 'Import' tab.
        #     self.dlg.lblCityDbStatus.setText(f"3DCityDB verison: {selected_db.c_version}")
        #     self.dlg.lblCityDbStatus.setStyleSheet("color:green")  
        #     get_schemas(self) #Stores DB schemas in DBLoader.schemas 

        #     if selected_db.has_installation: successful_connection_tab(self)
        #     else:
        #         if has_qgis_pkg(self): 
        #             successful_connection_tab(self)
        #             selected_db.has_installation = True
        #         else: 
        #             res= QMessageBox.question(self.dlg,"Installation", f"Database '{selected_db.database_name}' requires elements to be installed.\nDo you want to proceed?")
        #             if res == 16384: #YES                
        #                 upd_conn_file(self) #Prepares installation scripts with the connection parameters 
        #                 success = install(self)
                        
        #                 if success: 
        #                     selected_db.has_installation = True
        #                     self.schemas.append(self.plugin_package)
        #                     successful_connection_tab(self)

        #                 else:    
        #                     self.dlg.btnClearDB.setDisabled(False)
        #                     self.dlg.btnClearDB.setText(f'Clear corrupted installation!')  
        #                     self.dlg.wdgMain.setCurrentIndex(2)                      
        #             else: return None

        #     fill_schema_box(self)
        #     #create_constants(self)
            
        # else:
        #     QMessageBox.critical(self.dlg,"Fail", f"Database '{selected_db.database_name}' is NOT 3DCityDB! \nor 3DCityDB installation is corrupted.")
        #     #Disable 'Import' tab in case of connection fail
        #     self.dlg.tbImport.setDisabled(True)
        #     self.dlg.cbxSchema.clear()
        #     self.dlg.qcbxFeature.clear()
        #     self.dlg.cbxGeometryLvl.clear()

        

###--'Connection' tab--###########################################################
### 'Import' tab ###############################################################


            
    def evt_qcbxFeature_changed(self):
        selected_schema=self.dlg.cbxSchema.currentText()
        selected_feature=self.dlg.qcbxFeature.currentText()
        self.dlg.cbxGeometryLvl.clear()
        #self.dlg.cbxGeomteryType.clear()
        self.dlg.grbGeometry.setDisabled(True)
        self.dlg.cbxGeometryLvl.setDisabled(True)        
        #self.dlg.cbxGeomteryType.setDisabled(True) 
        self.dlg.btnImport.setText(f'Import {selected_feature} feature')
        self.dlg.btnImport.setDisabled(True)
        if not selected_schema and selected_feature: return #This is a guard
        delete_all_features_widgets(self,self.dlg.gridLayout_2)
        create_features_checkboxes(self)
    
    def evt_checkBox_stateChanged(self):
        self.dlg.cbxGeometryLvl.clear()
        extents=self.dlg.qgrbExtent.outputExtent().asWktPolygon() 
        checked_features = get_checked_features(self,self.dlg.gridLayout_2)
        count_objects_in_bbox(self,checked_features,extents)

        
        self.dlg.grbGeometry.setDisabled(False)
        self.dlg.cbxGeometryLvl.setDisabled(False)        
        fill_lod_box(self)  
    
    def evt_checkBoxTypes_stateChanged(self):
        #checked_types = get_checked_types(self,self.dlg.gridLayout_4)
        delete_all_features_widgets(self,self.dlg.formLayout)
        set_counter_label(self)


    def evt_canvas_extChanged(self):
        extent = self.iface.mapCanvas().extent()
        crs =self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        self.dlg.qgrbExtent.setCurrentExtent(extent,QgsCoordinateReferenceSystem(crs))
        self.dlg.qgrbExtent.setOutputCrs(QgsCoordinateReferenceSystem(crs))

    def evt_qgrbExtent_extChanged(self):

        self.dlg.qcbxFeature.clear()
        self.dlg.grbFeature.setDisabled(False)
        fill_module_box(self)
        
        self.dlg.cbxGeometryLvl.clear()
        self.dlg.grbGeometry.setDisabled(True)
        
        self.dlg.btnImport.setDisabled(True)

    def evt_cbxGeometryLvl_changed(self,idx):
        #self.dlg.cbxGeomteryType.clear()
        types = self.dlg.cbxGeometryLvl.itemData(idx)
        print("t",types)
        delete_all_features_widgets(self,self.dlg.gridLayout_4)
        create_geometry_checkboxes(self,types)
        

        delete_all_features_widgets(self,self.dlg.formLayout)
        set_counter_label(self)


        



    #def evt_cbxGeomteryType_changed(self):
        #if self.dlg.cbxGeomteryType.currentText() == "":
           # self.dlg.btnImport.setDisabled(True)
        #else: self.dlg.btnImport.setDisabled(False)
    
    def evt_btnImport_clicked(self):    
        import_layer(self)
        self.dlg.close()
        



###--'Import' tab--###########################################################

###--'Settings' tab--###########################################################
    def evt_btnInstallDB_clicked(self):
        InstallDB_setup(self)


    def evt_btnUnInstallDB_clicked(self):
        uninstall_views(self,schema= self.dlg.cbxSchema.currentText())


    
    def evt_btnClearDB_clicked(self):
        uninstall_pkg(self)
        self.conn.close()
        self.dlg.tbImport.setDisabled(True)
        self.dlg.btnConnectToDB.setDisabled(True)
        self.dlg.btnClearDB.setDisabled(True)
        self.dlg.btnClearDB.setText(f'Clear <Database> from plugin contents')
        self.dlg.lblCityDbStatus.clear()
        self.dlg.lblConnection.clear()
        self.dlg.cbxSchema.clear()
        self.dlg.qcbxFeature.clear()
        #self.dlg.cbxGeomteryType.clear()
        self.dlg.cbxGeometryLvl.clear()
        
        
    #def evt_btnRefreshViews_clicked(self):
        
        #btnRefreshViews_setup(self)

    def evt_btnRefreshViews_clicked(self):
        refreshViews_setup(self)


###--'Settings' tab--###########################################################




    def show_Qmsg(self,msg,msg_type=Qgis.Success,time=5):
        self.iface.messageBar().pushMessage(msg,level=msg_type, duration=time)



#TODO: Find if psycog2 cursor is client or server-sided and adjust for better practice.
# https://medium.com/dev-bits/understanding-postgresql-cursors-with-python-ebc3da591fe7            

#TODO:NOTE: DRAW ON CANVAS exibits wierd behaviour
#2. After clicking the button it seems that the drawing tools remains open at all times 

#TODO:NOTE: extent groupbox doesnt work for manual user input
#for every value change in any of the 4 inputs the extent signal is fired

    
            
