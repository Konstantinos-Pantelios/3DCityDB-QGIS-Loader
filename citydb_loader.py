# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBLoader
                                 A QGIS plugin
 This is an experimental plugin for 3DCityDB data visualization and manipulation.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Konstantinos Pantelios
        email                : konstantinospantelios@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QGraphicsView
from qgis.core import QgsApplication, QgsProject, Qgis
from qgis.core import QgsCoordinateReferenceSystem


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .citydb_loader_dialog import DBLoaderDialog    #Main dialog
from .connector import DlgConnector                 #New Connection dialog
from .functions import *

import os.path

class DBLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DBLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&3DCityDB-Loader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DBLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addDatabaseToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/citydb_loader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'&3DCityDB-Loader'),
            callback=self.run,
            parent=self.iface.mainWindow())


        # will be set False in run()
        self.first_start = True    

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&3DCityDB-Loader'),
                action)
            self.iface.removeDatabaseToolBarIcon(action)


#-----------#####################################################################
#--METHODS--#####################################################################
#-----------#####################################################################


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False


            self.dlg = DBLoaderDialog()

        ## 'Connection' tab ######################################################################################
            self.dlg.btnConnToExist.currentIndexChanged.connect(self.evt_btnConnToExist_changed)
            self.dlg.btnNewConn.clicked.connect(self.evt_btnNewConn_clicked) #New Dialog TODO: leave this for later
            self.dlg.btnCeckCityDB.clicked.connect(self.evt_btnCeckCityDB_clicked)
        ##----------------########################################################################################

        ## 'Import' tab ######################################################################################
            self.dlg.cbxScema.currentIndexChanged.connect(self.evt_cbxScema_changed)
            self.dlg.qcbxFeature.currentIndexChanged.connect(self.evt_qcbxFeature_changed)
            #Get initial canvas extent
            canvas = self.iface.mapCanvas()
            crs = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
            extent = canvas.extent()
            #self.dlg.qgrbExtent.setOriginalExtent(extent,canvas.mapSettings().destinationCrs())
            self.dlg.qgrbExtent.setMapCanvas(canvas)
            self.dlg.qgrbExtent.setCurrentExtent(extent,QgsCoordinateReferenceSystem(crs)) #TODO: get crs from canvas or layer
            self.dlg.qgrbExtent.setOutputCrs(QgsCoordinateReferenceSystem(crs))
            #Set extent change signal
            self.iface.mapCanvas().extentsChanged.connect(self.evt_canvas_extChanged)
            self.dlg.qgrbExtent.extentChanged.connect(self.evt_qgrbExtent_extChanged)

            self.dlg.cbxGeometryLvl.currentIndexChanged.connect(self.evt_cbxGeometryLvl_changed)

        ##----------------########################################################################################

            print("Initial start")
            
        #Get existing connections
            databases=get_postgres_conn(self.dlg)
    
        #Get new connection
        #TODO: For later
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            

            msg= "all is good for now"
            #filename = self.dlg.lineEdit.text()
            self.success_msg(msg)


#----------#####################################################################
#--EVENTS--#####################################################################
#----------#####################################################################


### 'Connection' tab ###########################################################
    def evt_btnNewConn_clicked(self):
        dlgConnector = DlgConnector()
        dlgConnector.show()
        dlgConnector.exec_()

    def evt_btnCeckCityDB_clicked(self):

        selected_db=self.dlg.btnConnToExist.currentData()
        if connect_and_check(selected_db):
            QMessageBox.information(self.dlg,"Success", f"Connection to '{selected_db.database}' established successfuly and the structure seems fine!")

            #Parially enable the 'Import' tab.
            self.dlg.tbImport.setDisabled(False)
            self.dlg.grbSchema.setDisabled(False)
            self.dlg.grbFeature.setDisabled(True)
            self.dlg.grbGeometry.setDisabled(True)
            self.dlg.grbExtent.setDisabled(True)
            self.dlg.wdgMain.setCurrentIndex(1)
            fill_schema_box(self.dlg,selected_db)
            

        else:
            QMessageBox.critical(self.dlg,"Fail", f"Connection to '{selected_db.database}' FAILED or the DB structure is not compatible with 3DCityDB!")
            #Disable 'Import' tab in case of connection fail
            self.dlg.tbImport.setDisabled(True)
            self.dlg.cbxScema.clear()
            self.dlg.qcbxFeature.clear()
            self.dlg.cbxGeomteryType.clear()
            self.dlg.cbxGeometryLvl.clear()

        
        #TODO: Display more insightfull fail messages
    
    def evt_btnConnToExist_changed(self, idx):
        selected_db=self.dlg.btnConnToExist.itemData(idx)
        self.dlg.btnCeckCityDB.setText(f"Check 3DCityDb compatability of '{selected_db.database}'")

###--'Connection' tab--###########################################################
### 'Import' tab ###############################################################
    def evt_cbxScema_changed(self):
        selected_db=self.dlg.btnConnToExist.currentData()
        selected_schema=self.dlg.cbxScema.currentText()
        if not selected_schema: return #This is a guard

        #Check current schema for features
        if check_schema(self.dlg,selected_db):
            self.dlg.grbFeature.setDisabled(False)
            self.dlg.grbExtent.setDisabled(False)
            self.dlg.qgrbExtent.setDisabled(False)
            self.dlg.grbGeometry.setDisabled(True)
            self.dlg.cbxGeomteryType.clear()
            self.dlg.cbxGeometryLvl.clear()

        else:
            self.dlg.qcbxFeature.clear()
            #self.dlg.grbExtent.clear() 
            self.dlg.grbFeature.setDisabled(True)
            self.dlg.grbExtent.setDisabled(True)
            self.dlg.grbGeometry.setDisabled(True)
            self.dlg.cbxGeomteryType.clear()
            self.dlg.cbxGeometryLvl.clear()
            QMessageBox.critical(self.dlg,"Fail", f"Schema '{selected_schema}' does NOT contain any valid features!\nSelect different schema.")

    def evt_qcbxFeature_changed(self):
        selected_db=self.dlg.btnConnToExist.currentData()
        selected_schema=self.dlg.cbxScema.currentText()
        selected_feature=self.dlg.qcbxFeature.currentText()
        if not selected_schema and selected_feature: return #This is a guard
        #check_geometries(self,selected_db,selected_schema,selected_feature)
    
    def evt_canvas_extChanged(self):
        extent = self.iface.mapCanvas().extent()
        crs =self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        self.dlg.qgrbExtent.setCurrentExtent(extent,QgsCoordinateReferenceSystem(crs))
        self.dlg.qgrbExtent.setOutputCrs(QgsCoordinateReferenceSystem(crs))

    def evt_qgrbExtent_extChanged(self):
        selected_db=self.dlg.btnConnToExist.currentData()
        selected_schema=self.dlg.cbxScema.currentText()
        selected_feature=self.dlg.qcbxFeature.currentText()
        if not selected_schema and selected_feature: return #This is a guard

        res = check_geometry(self,selected_db,selected_schema,selected_feature)
        if res == 3:
            self.dlg.grbGeometry.setDisabled(False)
            self.dlg.cbxGeometryLvl.setDisabled(False)        
            self.dlg.cbxGeomteryType.setDisabled(False)
        elif res==2:
            self.dlg.cbxGeometryLvl.clear()
            self.dlg.cbxGeomteryType.clear()
            self.dlg.grbGeometry.setDisabled(True)
            self.dlg.cbxGeometryLvl.setDisabled(True)        
            self.dlg.cbxGeomteryType.setDisabled(True)   
        elif res == 1:
            self.dlg.cbxGeomteryType.setDisabled(True)
        elif res == 0:
            self.dlg.cbxGeometryLvl.setDisabled(True) 

    def evt_cbxGeometryLvl_changed(self,idx):
        self.dlg.cbxGeomteryType.clear()
        types = self.dlg.cbxGeometryLvl.itemData(idx)
        if types is not None:
            self.dlg.cbxGeomteryType.addItems(types)

###--'Import' tab--###########################################################

    def show_Qmsg(self,msg,msg_type=Qgis.Success,time=5):
        self.iface.messageBar().pushMessage(msg,level=msg_type, duration=time)



#TODO: Find if psycog2 cursor is client or server-sided and adjust for better practice.
# https://medium.com/dev-bits/understanding-postgresql-cursors-with-python-ebc3da591fe7            

#TODO:NOTE: DRAW ON CANVAS exibits wierd behaviour
#1. The extent is updated on the QGScombobox but not in the internal value that the code reads.
#2. After clicking the button it seems that the drawing tools remains open at all times 

    
            
