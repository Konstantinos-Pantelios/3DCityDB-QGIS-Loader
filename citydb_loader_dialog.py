# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBLoaderDialog
                                 A QGIS plugin
 This is an experimental plugin for 3DCityDB data visualization and manipulation.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Konstantinos Pantelios
        email                : konstantinospantelios@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, configparser

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'citydb_loader_dialog_base.ui'))


class DBLoaderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DBLoaderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
    def get_postgres_conn(self):
        """ Reads QGIS3.ini to get saved user connection parameters of postgres databases""" 
        
################## GET CONNECTION DETAILS ################################
        # Clear the contents of the comboBox from previous runs
        self.btnConnToExist.clear()
        # Populate the comboBox with names of all the loaded layers
        ini_path = '/home/konstantinos/.local/share/QGIS/QGIS3/profiles/default/QGIS/QGIS3.ini' #TODO: convert it to relative path
        parser = configparser.ConfigParser()
        parser.optionxform = str #Makes path 'Case Sensitive'

        parser.read(ini_path)

        #db_name = re.compile('.*\database')
        for key in parser['PostgreSQL']:
    
            if '\database' in str(key):
                connection_name = str(key).split("\\")[1]
                self.btnConnToExist.addItems(['   '.join((parser['PostgreSQL'][key],f"(Connection name: {connection_name})"))])

################################################################################################                 



        #TODO: Add QT slots here either from other files or better from method of this class
        
